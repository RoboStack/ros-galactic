diff --git a/nav2_smac_planner/CMakeLists.txt b/nav2_smac_planner/CMakeLists.txt
index 05b84e4f8b..6da37d4c20 100644
--- a/nav2_smac_planner/CMakeLists.txt
+++ b/nav2_smac_planner/CMakeLists.txt
@@ -1,6 +1,8 @@
 cmake_minimum_required(VERSION 3.5)
 project(nav2_smac_planner)
 
+add_definitions(-DNOMINMAX)
+
 set(CMAKE_BUILD_TYPE Release) #Debug, Release
 
 find_package(ament_cmake REQUIRED)
@@ -30,7 +30,11 @@ endif()
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
 
-add_compile_options(-O3 -Wextra -Wdeprecated -fPIC)
+if(MSVC)
+  add_compile_definitions(_USE_MATH_DEFINES)
+else()
+  add_compile_options(-O3 -Wextra -Wdeprecated -fPIC)
+endif()
 
 include_directories(
   include
diff --git a/nav2_smac_planner/src/costmap_downsampler.cpp b/nav2_smac_planner/src/costmap_downsampler.cpp
index 32bc05b36a..725ce5f469 100644
--- a/nav2_smac_planner/src/costmap_downsampler.cpp
+++ b/nav2_smac_planner/src/costmap_downsampler.cpp
@@ -90,8 +90,8 @@ nav2_costmap_2d::Costmap2D * CostmapDownsampler::downsample(
   }
 
   // Assign costs
-  for (uint i = 0; i < _downsampled_size_x; ++i) {
-    for (uint j = 0; j < _downsampled_size_y; ++j) {
+  for (unsigned int i = 0; i < _downsampled_size_x; ++i) {
+    for (unsigned int j = 0; j < _downsampled_size_y; ++j) {
       setCostOfCell(i, j);
     }
   }
@@ -130,12 +130,12 @@ void CostmapDownsampler::setCostOfCell(
   unsigned int x_offset = new_mx * _downsampling_factor;
   unsigned int y_offset = new_my * _downsampling_factor;
 
-  for (uint i = 0; i < _downsampling_factor; ++i) {
+  for (unsigned int i = 0; i < _downsampling_factor; ++i) {
     mx = x_offset + i;
     if (mx >= _size_x) {
       continue;
     }
-    for (uint j = 0; j < _downsampling_factor; ++j) {
+    for (unsigned int j = 0; j < _downsampling_factor; ++j) {
       my = y_offset + j;
       if (my >= _size_y) {
         continue;
diff --git a/nav2_smac_planner/src/node_2d.cpp b/nav2_smac_planner/src/node_2d.cpp
index a9ed0abf58..7ab06e18a2 100644
--- a/nav2_smac_planner/src/node_2d.cpp
+++ b/nav2_smac_planner/src/node_2d.cpp
@@ -135,9 +135,18 @@ void Node2D::getNeighbors(
   int index;
   NodePtr neighbor;
   int node_i = this->getIndex();
+  const Coordinates parent = getCoords(this->getIndex());
+  Coordinates child;
 
   for (unsigned int i = 0; i != _neighbors_grid_offsets.size(); ++i) {
     index = node_i + _neighbors_grid_offsets[i];
+
+    // Check for wrap around conditions
+    child = getCoords(index);
+    if (fabs(parent.x - child.x) > 1 || fabs(parent.y - child.y) > 1) {
+      continue;
+    }
+
     if (NeighborGetter(index, neighbor)) {
       if (neighbor->isNodeValid(traverse_unknown, collision_checker) && !neighbor->wasVisited()) {
         neighbors.push_back(neighbor);
diff --git a/nav2_smac_planner/test/deprecated/smoother.hpp b/nav2_smac_planner/test/deprecated/smoother.hpp
index e523eaea1b..91cfcd257c 100644
--- a/nav2_smac_planner/test/deprecated/smoother.hpp
+++ b/nav2_smac_planner/test/deprecated/smoother.hpp
@@ -105,8 +105,13 @@ class Smoother
   {
     _options.max_solver_time_in_seconds = params.max_time;
 
-    double parameters[path.size() * 2];  // NOLINT
-    for (uint i = 0; i != path.size(); i++) {
+#ifdef _MSC_VER
+    std::vector<double> parameters_vec(path.size() * 2);
+    double * parameters = parameters_vec.data();
+#else
+    double parameters[path.size() * 2];    // NOLINT
+#endif
+    for (unsigned int i = 0; i != path.size(); i++) {
       parameters[2 * i] = path[i][0];
       parameters[2 * i + 1] = path[i][1];
     }
@@ -123,7 +128,7 @@ class Smoother
       return false;
     }
 
-    for (uint i = 0; i != path.size(); i++) {
+    for (unsigned int i = 0; i != path.size(); i++) {
       path[i][0] = parameters[2 * i];
       path[i][1] = parameters[2 * i + 1];
     }
diff --git a/nav2_smac_planner/test/deprecated/smoother_cost_function.hpp b/nav2_smac_planner/test/deprecated/smoother_cost_function.hpp
index 7e5349c894..acd6414567 100644
--- a/nav2_smac_planner/test/deprecated/smoother_cost_function.hpp
+++ b/nav2_smac_planner/test/deprecated/smoother_cost_function.hpp
@@ -122,7 +122,7 @@ class UnconstrainedSmootherCostFunction : public ceres::FirstOrderFunction
     Eigen::Vector2d xi;
     Eigen::Vector2d xi_p1;
     Eigen::Vector2d xi_m1;
-    uint x_index, y_index;
+    unsigned int x_index, y_index;
     cost[0] = 0.0;
     double cost_raw = 0.0;
     double grad_x_raw = 0.0;
