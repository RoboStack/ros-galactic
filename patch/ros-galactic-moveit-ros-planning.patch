diff --git a/planning_pipeline/CMakeLists.txt b/planning_pipeline/CMakeLists.txt
index cf3c676457..2e8c7c925c 100644
--- a/planning_pipeline/CMakeLists.txt
+++ b/planning_pipeline/CMakeLists.txt
@@ -1,6 +1,9 @@
 set(MOVEIT_LIB_NAME moveit_planning_pipeline)
 
 add_library(${MOVEIT_LIB_NAME} SHARED src/planning_pipeline.cpp)
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 
 ament_target_dependencies(${MOVEIT_LIB_NAME}
@@ -12,3 +15,4 @@ ament_target_dependencies(${MOVEIT_LIB_NAME}
 )
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
diff --git a/planning_pipeline/include/moveit/planning_pipeline/planning_pipeline.h b/planning_pipeline/include/moveit/planning_pipeline/planning_pipeline.h
index 77a1e47260..3c3527da32 100644
--- a/planning_pipeline/include/moveit/planning_pipeline/planning_pipeline.h
+++ b/planning_pipeline/include/moveit/planning_pipeline/planning_pipeline.h
@@ -45,6 +45,8 @@
 
 #include <memory>
 
+#include "moveit_planning_pipeline_export.h"
+
 /** \brief Planning pipeline */
 namespace planning_pipeline
 {
@@ -54,7 +56,7 @@ namespace planning_pipeline
     planning plugin and the
     planning_request_adapter::PlanningRequestAdapter plugins, in the
     specified order. */
-class PlanningPipeline
+class MOVEIT_PLANNING_PIPELINE_EXPORT PlanningPipeline
 {
 public:
   /** \brief When motion plans are computed and they are supposed to be automatically displayed, they are sent to this
diff --git a/planning_scene_monitor/CMakeLists.txt b/planning_scene_monitor/CMakeLists.txt
index b72df8876c..0abcbfde1a 100644
--- a/planning_scene_monitor/CMakeLists.txt
+++ b/planning_scene_monitor/CMakeLists.txt
@@ -5,6 +5,9 @@ add_library(${MOVEIT_LIB_NAME} SHARED
   src/current_state_monitor.cpp
   src/trajectory_monitor.cpp
 )
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 ament_target_dependencies(${MOVEIT_LIB_NAME}
   moveit_ros_occupancy_map_monitor
@@ -36,3 +39,4 @@ install(TARGETS demo_scene
 )
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
diff --git a/planning_scene_monitor/include/moveit/planning_scene_monitor/planning_scene_monitor.h b/planning_scene_monitor/include/moveit/planning_scene_monitor/planning_scene_monitor.h
index bff0dc56b0..c275e40d40 100644
--- a/planning_scene_monitor/include/moveit/planning_scene_monitor/planning_scene_monitor.h
+++ b/planning_scene_monitor/include/moveit/planning_scene_monitor/planning_scene_monitor.h
@@ -49,9 +49,12 @@
 #include <boost/noncopyable.hpp>
 #include <boost/thread/shared_mutex.hpp>
 #include <boost/thread/recursive_mutex.hpp>
+#include <boost/thread/thread.hpp>
 #include <memory>
 #include <thread>
 
+#include "moveit_planning_scene_monitor_export.h"
+
 namespace planning_scene_monitor
 {
 MOVEIT_CLASS_FORWARD(PlanningSceneMonitor);  // Defines PlanningSceneMonitorPtr, ConstPtr, WeakPtr... etc
@@ -59,7 +62,7 @@ MOVEIT_CLASS_FORWARD(PlanningSceneMonitor);  // Defines PlanningSceneMonitorPtr,
 /**
  * @brief PlanningSceneMonitor
  * Subscribes to the topic \e planning_scene */
-class PlanningSceneMonitor : private boost::noncopyable
+class MOVEIT_PLANNING_SCENE_MONITOR_EXPORT PlanningSceneMonitor : private boost::noncopyable
 {
 public:
   enum SceneUpdateType
diff --git a/rdf_loader/src/rdf_loader.cpp b/rdf_loader/src/rdf_loader.cpp
index 2af090bf7d..ab64407cb8 100644
--- a/rdf_loader/src/rdf_loader.cpp
+++ b/rdf_loader/src/rdf_loader.cpp
@@ -192,7 +192,11 @@ bool RDFLoader::loadXacroFileToString(std::string& buffer, const std::string& pa
     cmd += xacro_arg + " ";
   cmd += path;
 
+#ifdef _WIN32
+  FILE* pipe = _popen(cmd.c_str(), "r");
+#else
   FILE* pipe = popen(cmd.c_str(), "r");
+#endif
   if (!pipe)
   {
     RCLCPP_ERROR(LOGGER, "Unable to load path");
@@ -205,7 +209,11 @@ bool RDFLoader::loadXacroFileToString(std::string& buffer, const std::string& pa
     if (fgets(pipe_buffer, 128, pipe) != nullptr)
       buffer += pipe_buffer;
   }
+#ifdef _WIN32
+  _pclose(pipe);
+#else
   pclose(pipe);
+#endif
 
   return true;
 }
diff --git a/trajectory_execution_manager/CMakeLists.txt b/trajectory_execution_manager/CMakeLists.txt
index d0e2b2acd0..95db3085ab 100644
--- a/trajectory_execution_manager/CMakeLists.txt
+++ b/trajectory_execution_manager/CMakeLists.txt
@@ -1,6 +1,9 @@
 set(MOVEIT_LIB_NAME moveit_trajectory_execution_manager)
 
 add_library(${MOVEIT_LIB_NAME} SHARED src/trajectory_execution_manager.cpp)
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 ament_target_dependencies(${MOVEIT_LIB_NAME}
   moveit_core
@@ -18,6 +21,7 @@ target_link_libraries(${MOVEIT_LIB_NAME}
 )
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
 
 if(CATKIN_ENABLE_TESTING)
 
diff --git a/trajectory_execution_manager/include/moveit/trajectory_execution_manager/trajectory_execution_manager.h b/trajectory_execution_manager/include/moveit/trajectory_execution_manager/trajectory_execution_manager.h
index bcba19818e..55e2b5b733 100644
--- a/trajectory_execution_manager/include/moveit/trajectory_execution_manager/trajectory_execution_manager.h
+++ b/trajectory_execution_manager/include/moveit/trajectory_execution_manager/trajectory_execution_manager.h
@@ -48,6 +48,9 @@
 #include <pluginlib/class_loader.hpp>
 
 #include <memory>
+#include <deque>
+
+#include "moveit_trajectory_execution_manager_export.h"
 
 namespace trajectory_execution_manager
 {
@@ -56,7 +59,7 @@ MOVEIT_CLASS_FORWARD(TrajectoryExecutionManager);  // Defines TrajectoryExecutio
 // Two modes:
 // Managed controllers
 // Unmanaged controllers: given the trajectory,
-class TrajectoryExecutionManager
+class MOVEIT_TRAJECTORY_EXECUTION_MANAGER_EXPORT TrajectoryExecutionManager
 {
 public:
   static const std::string EXECUTION_EVENT_TOPIC;
