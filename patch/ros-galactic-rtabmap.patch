diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5cdae61..3276b44 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,5 @@
 # Top-Level CmakeLists.txt
-cmake_minimum_required(VERSION 3.5)
+cmake_minimum_required(VERSION 3.18)
 PROJECT( RTABMap )
 SET(PROJECT_PREFIX rtabmap)
 
@@ -80,12 +80,12 @@ IF(MINGW)
 ENDIF(MINGW)
 
 # GCC 4 required
-IF(UNIX OR MINGW)
-    EXEC_PROGRAM( gcc ARGS "-dumpversion" OUTPUT_VARIABLE GCC_VERSION )
-    IF(GCC_VERSION VERSION_LESS "4.0.0")
-        MESSAGE(FATAL_ERROR "GCC ${GCC_VERSION} found, but version 4.x.x minimum is required")
-    ENDIF(GCC_VERSION VERSION_LESS "4.0.0")
-ENDIF(UNIX OR MINGW)
+# IF(UNIX OR MINGW)
+#     EXEC_PROGRAM( gcc ARGS "-dumpversion" OUTPUT_VARIABLE GCC_VERSION )
+#     IF(GCC_VERSION VERSION_LESS "4.0.0")
+#         MESSAGE(FATAL_ERROR "GCC ${GCC_VERSION} found, but version 4.x.x minimum is required")
+#     ENDIF(GCC_VERSION VERSION_LESS "4.0.0")
+# ENDIF(UNIX OR MINGW)
 
 #The CDT Error Parser cannot handle error messages that span 
 #more than one line, which is the default gcc behavior. 

@@ -353,12 +353,49 @@ IF(WITH_TORCH)
 ENDIF(WITH_TORCH)
 
 IF(WITH_PYTHON)
-    FIND_PACKAGE(Python3 COMPONENTS Interpreter Development)
+    FIND_PACKAGE(Python3 REQUIRED COMPONENTS Interpreter Development)
     IF(Python3_FOUND)
         MESSAGE(STATUS "Found Python3")
     ENDIF(Python3_FOUND)
 ENDIF(WITH_PYTHON)
 
+execute_process(COMMAND "${Python3_EXECUTABLE}" "-c"
+    "import numpy as np; print(np.__version__); print(np.get_include());"
+    RESULT_VARIABLE _NUMPY_SEARCH_SUCCESS
+    OUTPUT_VARIABLE _NUMPY_VALUES_OUTPUT
+    ERROR_VARIABLE _NUMPY_ERROR_VALUE
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+if(_NUMPY_SEARCH_SUCCESS MATCHES 0)
+  # Convert the process output into a list
+  string(REGEX REPLACE ";" "\\\\;" _NUMPY_VALUES ${_NUMPY_VALUES_OUTPUT})
+  string(REGEX REPLACE "\n" ";" _NUMPY_VALUES ${_NUMPY_VALUES})
+  list(GET _NUMPY_VALUES 0 NUMPY_VERSION)
+  list(GET _NUMPY_VALUES 1 NUMPY_INCLUDE_DIRS)
+
+  string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" _VER_CHECK "${NUMPY_VERSION}")
+  if("${_VER_CHECK}" STREQUAL "")
+      # The output from Python was unexpected. Raise an error always
+      # here, because we found NumPy, but it appears to be corrupted somehow.
+      message(FATAL_ERROR
+          "Requested version and include path from NumPy, got instead:\n${_NUMPY_VALUES_OUTPUT}\n")
+      return()
+  endif()
+
+  # Make sure all directory separators are '/'
+  string(REGEX REPLACE "\\\\" "/" NUMPY_INCLUDE_DIRS ${NUMPY_INCLUDE_DIRS})
+
+  # Get the major and minor version numbers
+  string(REGEX REPLACE "\\." ";" _NUMPY_VERSION_LIST ${NUMPY_VERSION})
+  list(GET _NUMPY_VERSION_LIST 0 NUMPY_VERSION_MAJOR)
+  list(GET _NUMPY_VERSION_LIST 1 NUMPY_VERSION_MINOR)
+  list(GET _NUMPY_VERSION_LIST 2 NUMPY_VERSION_PATCH)
+  string(REGEX MATCH "[0-9]*" NUMPY_VERSION_PATCH ${NUMPY_VERSION_PATCH})
+  math(EXPR NUMPY_VERSION_DECIMAL
+      "(${NUMPY_VERSION_MAJOR} * 10000) + (${NUMPY_VERSION_MINOR} * 100) + ${NUMPY_VERSION_PATCH}")
+endif()
+
+
 IF(WITH_PDAL)
     FIND_PACKAGE(PDAL QUIET)
     IF(PDAL_FOUND)
@@ -1213,7 +1250,7 @@ MESSAGE(STATUS "  With SupertPoint          = NO (libtorch not found)")
 ENDIF()
 
 IF(Python3_FOUND)
-MESSAGE(STATUS "  With Python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}            = YES (License: PSF)")
+MESSAGE(STATUS "  With Python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}            = YES (License: PSF) ${NUMPY_INCLUDE_DIRS}")
 ELSEIF(NOT WITH_PYTHON)
 MESSAGE(STATUS "  With Python3              = NO (WITH_PYTHON=OFF)")
 ELSE()
diff --git a/corelib/src/CMakeLists.txt b/corelib/src/CMakeLists.txt
index 25d5e2d..6950109 100644
--- a/corelib/src/CMakeLists.txt
+++ b/corelib/src/CMakeLists.txt
@@ -150,10 +150,15 @@ SET(INCLUDE_DIRS
 	${ZLIB_INCLUDE_DIRS}
 )
 
+find_package(PkgConfig REQUIRED)
+pkg_check_modules(udev REQUIRED libudev)
+
+
 SET(LIBRARIES
 	${OpenCV_LIBS} 
 	${PCL_LIBRARIES} 
 	${ZLIB_LIBRARIES} 
+	${udev_LINK_LIBRARIES}
 )
 
 IF(Sqlite3_FOUND)
@@ -204,6 +209,7 @@ IF(Python3_FOUND)
 		python/PyDetector.cpp
 	)
 	 SET(INCLUDE_DIRS
+            ${NUMPY_INCLUDE_DIRS}
 	    ${TORCH_INCLUDE_DIRS}
 	    ${CMAKE_CURRENT_SOURCE_DIR}/python
 		${INCLUDE_DIRS}
