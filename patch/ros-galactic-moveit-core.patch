diff --git a/CMakeModules/FindBULLET.cmake b/CMakeModules/FindBULLET.cmake
deleted file mode 100644
index bfe4056a14..0000000000
--- a/CMakeModules/FindBULLET.cmake
+++ /dev/null
@@ -1,10 +0,0 @@
-include(FindPackageHandleStandardArgs)
-find_package(PkgConfig)
-
-if(PKGCONFIG_FOUND)
-  pkg_check_modules(BULLET bullet)
-endif()
-
-find_package_handle_standard_args(BULLET
-                                  REQUIRED_VARS BULLET_LIBRARIES BULLET_INCLUDE_DIRS
-                                  VERSION_VAR BULLET_VERSION)
diff --git a/ConfigExtras.cmake b/ConfigExtras.cmake
index f208f771f9..66d6e50b17 100644
--- a/ConfigExtras.cmake
+++ b/ConfigExtras.cmake
@@ -1,9 +1,5 @@
 # Extras module needed for dependencies to find boost components
 
-# boost::iostreams on Windows depends on boost::zlib
-if(WIN32)
-  set(EXTRA_BOOST_COMPONENTS zlib)
-endif()
 find_package(Boost REQUIRED
   chrono
   date_time
@@ -14,5 +10,4 @@ find_package(Boost REQUIRED
   serialization
   system
   thread
-  ${EXTRA_BOOST_COMPONENTS}
 )
diff --git a/collision_detection/CMakeLists.txt b/collision_detection/CMakeLists.txt
index a914eafb36..734d0b48a5 100644
--- a/collision_detection/CMakeLists.txt
+++ b/collision_detection/CMakeLists.txt
@@ -10,7 +10,9 @@ add_library(${MOVEIT_LIB_NAME} SHARED
   src/world_diff.cpp
   src/collision_env.cpp
 )
-
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION})
 ament_target_dependencies(${MOVEIT_LIB_NAME}
   rclcpp
@@ -51,3 +53,4 @@ if(BUILD_TESTING)
 endif()
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
diff --git a/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h b/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h
index fdc9aec03b..def3f3bc17 100644
--- a/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h
+++ b/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h
@@ -39,10 +39,12 @@
 #include <moveit/collision_detection/collision_detector_allocator.h>
 #include <moveit/collision_detection/allvalid/collision_env_allvalid.h>
 
+#include "moveit_collision_detection_export.h"
+
 namespace collision_detection
 {
 /** \brief An allocator for AllValid collision detectors */
-class CollisionDetectorAllocatorAllValid
+class MOVEIT_COLLISION_DETECTION_EXPORT CollisionDetectorAllocatorAllValid
   : public CollisionDetectorAllocatorTemplate<CollisionEnvAllValid, CollisionDetectorAllocatorAllValid>
 {
 public:
diff --git a/collision_detection_bullet/CMakeLists.txt b/collision_detection_bullet/CMakeLists.txt
index 5d8e87d9a3..1918466bac 100644
--- a/collision_detection_bullet/CMakeLists.txt
+++ b/collision_detection_bullet/CMakeLists.txt
@@ -9,6 +9,9 @@ add_library(${MOVEIT_LIB_NAME} SHARED
   src/bullet_integration/contact_checker_common.cpp
   src/bullet_integration/ros_bullet_utils.cpp
 )
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 ament_target_dependencies(${MOVEIT_LIB_NAME} SYSTEM
   BULLET
@@ -44,6 +47,7 @@ target_link_libraries(collision_detector_bullet_plugin
 )
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
 install(TARGETS ${MOVEIT_LIB_NAME} EXPORT ${MOVEIT_LIB_NAME}
   TARGETS collision_detector_bullet_plugin EXPORT collision_detector_bullet_plugin
   LIBRARY DESTINATION lib
@@ -61,15 +65,21 @@ if(BUILD_TESTING)
   ament_add_gtest(test_bullet_collision_detection test/test_bullet_collision_detection_pr2.cpp)
   target_link_libraries(test_bullet_collision_detection moveit_test_utils ${MOVEIT_LIB_NAME})
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
-  target_compile_options(test_bullet_collision_detection PRIVATE -Wno-deprecated-declarations)
+  if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    target_compile_options(test_bullet_collision_detection PRIVATE -Wno-deprecated-declarations)
+  endif()
 
   ament_add_gtest(test_bullet_collision_detection_panda test/test_bullet_collision_detection_panda.cpp)
   target_link_libraries(test_bullet_collision_detection_panda moveit_test_utils ${MOVEIT_LIB_NAME})
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
-  target_compile_options(test_bullet_collision_detection_panda PRIVATE -Wno-deprecated-declarations)
+  if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    target_compile_options(test_bullet_collision_detection_panda PRIVATE -Wno-deprecated-declarations)
+  endif()
 
   ament_add_gtest(test_bullet_continuous_collision_checking test/test_bullet_continuous_collision_checking.cpp)
   target_link_libraries(test_bullet_continuous_collision_checking moveit_test_utils ${MOVEIT_LIB_NAME})
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
-  target_compile_options(test_bullet_continuous_collision_checking PRIVATE -Wno-deprecated-declarations)
+  if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    target_compile_options(test_bullet_continuous_collision_checking PRIVATE -Wno-deprecated-declarations)
+  endif()
 endif()
diff --git a/collision_detection_bullet/include/moveit/collision_detection_bullet/collision_detector_allocator_bullet.h b/collision_detection_bullet/include/moveit/collision_detection_bullet/collision_detector_allocator_bullet.h
index 8b3c11057e..c0cf1be7bf 100644
--- a/collision_detection_bullet/include/moveit/collision_detection_bullet/collision_detector_allocator_bullet.h
+++ b/collision_detection_bullet/include/moveit/collision_detection_bullet/collision_detector_allocator_bullet.h
@@ -39,10 +39,12 @@
 #include <moveit/collision_detection/collision_detector_allocator.h>
 #include <moveit/collision_detection_bullet/collision_env_bullet.h>
 
+#include "moveit_collision_detection_bullet_export.h"
+
 namespace collision_detection
 {
 /** \brief An allocator for Bullet collision detectors */
-class CollisionDetectorAllocatorBullet
+class MOVEIT_COLLISION_DETECTION_BULLET_EXPORT CollisionDetectorAllocatorBullet
   : public CollisionDetectorAllocatorTemplate<CollisionEnvBullet, CollisionDetectorAllocatorBullet>
 {
 public:
diff --git a/collision_detection_fcl/CMakeLists.txt b/collision_detection_fcl/CMakeLists.txt
index b6a6b839f6..32002955a7 100644
--- a/collision_detection_fcl/CMakeLists.txt
+++ b/collision_detection_fcl/CMakeLists.txt
@@ -4,6 +4,9 @@ add_library(${MOVEIT_LIB_NAME} SHARED
   src/collision_common.cpp
   src/collision_env_fcl.cpp
 )
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 ament_target_dependencies(${MOVEIT_LIB_NAME}
   rclcpp
@@ -34,6 +37,7 @@ target_link_libraries(collision_detector_fcl_plugin
 )
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
 
 if(BUILD_TESTING)
   if(WIN32)
@@ -48,10 +52,14 @@ if(BUILD_TESTING)
   ament_add_gtest(test_fcl_collision_detection test/test_fcl_collision_detection_pr2.cpp)
   target_link_libraries(test_fcl_collision_detection moveit_test_utils ${MOVEIT_LIB_NAME})
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
-  target_compile_options(test_fcl_collision_detection PRIVATE -Wno-deprecated-declarations)
+  if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    target_compile_options(test_fcl_collision_detection PRIVATE -Wno-deprecated-declarations)
+  endif()
 
   ament_add_gtest(test_fcl_collision_detection_panda test/test_fcl_collision_detection_panda.cpp)
   target_link_libraries(test_fcl_collision_detection_panda moveit_test_utils ${MOVEIT_LIB_NAME})
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
-  target_compile_options(test_fcl_collision_detection_panda PRIVATE -Wno-deprecated-declarations)
+  if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    target_compile_options(test_fcl_collision_detection_panda PRIVATE -Wno-deprecated-declarations)
+  endif()
 endif()
diff --git a/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h b/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h
index fde03c4cb5..56851f1679 100644
--- a/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h
+++ b/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h
@@ -39,10 +39,12 @@
 #include <moveit/collision_detection/collision_detector_allocator.h>
 #include <moveit/collision_detection_fcl/collision_env_fcl.h>
 
+#include "moveit_collision_detection_fcl_export.h"
+
 namespace collision_detection
 {
 /** \brief An allocator for FCL collision detectors */
-class CollisionDetectorAllocatorFCL
+class MOVEIT_COLLISION_DETECTION_FCL_EXPORT CollisionDetectorAllocatorFCL
   : public CollisionDetectorAllocatorTemplate<CollisionEnvFCL, CollisionDetectorAllocatorFCL>
 {
 public:
diff --git a/constraint_samplers/test/pr2_arm_ik.cpp b/constraint_samplers/test/pr2_arm_ik.cpp
index 77080ee9ef..d172392822 100644
--- a/constraint_samplers/test/pr2_arm_ik.cpp
+++ b/constraint_samplers/test/pr2_arm_ik.cpp
@@ -789,6 +789,6 @@ bool PR2ArmIK::checkJointLimits(const double& joint_value, const int& joint_num)
   else
     jv = angles::normalize_angle(joint_value * angle_multipliers_[joint_num]);
 
-  return not(jv < min_angles_[joint_num] || jv > max_angles_[joint_num]);
+  return !(jv < min_angles_[joint_num] || jv > max_angles_[joint_num]);
 }
 }  // namespace pr2_arm_kinematics
diff --git a/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp b/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp
index 5b2a7b6716..3ca4e0a7e9 100644
--- a/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp
+++ b/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp
@@ -38,6 +38,7 @@
 #include <kdl_parser/kdl_parser.hpp>
 #include <tf2_kdl/tf2_kdl.h>
 #include <algorithm>
+#include <cmath>
 
 #include <moveit/robot_model/robot_model.h>
 #include "pr2_arm_kinematics_plugin.h"
@@ -240,7 +241,7 @@ double computeEuclideanDistance(const std::vector<double>& array_1, const KDL::J
   {
     distance += (array_1[i] - array_2(i)) * (array_1[i] - array_2(i));
   }
-  return sqrt(distance);
+  return std::sqrt(distance);
 }
 
 void getKDLChainInfo(const KDL::Chain& chain, moveit_msgs::msg::KinematicSolverInfo& chain_info)
diff --git a/kinematics_base/CMakeLists.txt b/kinematics_base/CMakeLists.txt
index ef52feff78..a588d259f8 100644
--- a/kinematics_base/CMakeLists.txt
+++ b/kinematics_base/CMakeLists.txt
@@ -2,7 +2,9 @@ cmake_minimum_required(VERSION 3.5)
 set(MOVEIT_LIB_NAME moveit_kinematics_base)
 
 add_library(${MOVEIT_LIB_NAME} SHARED src/kinematics_base.cpp)
-set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 
 # This line is needed to ensure that messages are done being built before this is built
 ament_target_dependencies(
@@ -17,3 +19,4 @@ ament_target_dependencies(
 )
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
diff --git a/kinematics_base/include/moveit/kinematics_base/kinematics_base.h b/kinematics_base/include/moveit/kinematics_base/kinematics_base.h
index 4966b017d9..1820513897 100644
--- a/kinematics_base/include/moveit/kinematics_base/kinematics_base.h
+++ b/kinematics_base/include/moveit/kinematics_base/kinematics_base.h
@@ -43,6 +43,8 @@
 #include <boost/function.hpp>
 #include <string>
 
+#include "moveit_kinematics_base_export.h"
+
 namespace moveit
 {
 namespace core
@@ -140,7 +142,7 @@ MOVEIT_CLASS_FORWARD(KinematicsBase);  // Defines KinematicsBasePtr, ConstPtr, W
  * @class KinematicsBase
  * @brief Provides an interface for kinematics solvers.
  */
-class KinematicsBase
+class MOVEIT_KINEMATICS_BASE_EXPORT KinematicsBase
 {
 public:
   static const rclcpp::Logger LOGGER;
diff --git a/planning_scene/CMakeLists.txt b/planning_scene/CMakeLists.txt
index fc1f7d788f..bb62d2a351 100644
--- a/planning_scene/CMakeLists.txt
+++ b/planning_scene/CMakeLists.txt
@@ -1,6 +1,9 @@
 set(MOVEIT_LIB_NAME moveit_planning_scene)
 
 add_library(${MOVEIT_LIB_NAME} SHARED src/planning_scene.cpp)
+include(GenerateExportHeader)
+generate_export_header(${MOVEIT_LIB_NAME})
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 #TODO: Fix the versioning
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 ament_target_dependencies(${MOVEIT_LIB_NAME}
@@ -26,6 +29,7 @@ target_link_libraries(${MOVEIT_LIB_NAME}
 )
 
 install(DIRECTORY include/ DESTINATION include)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
 
 if(BUILD_TESTING)
   find_package(ament_cmake_gtest REQUIRED)
diff --git a/planning_scene/include/moveit/planning_scene/planning_scene.h b/planning_scene/include/moveit/planning_scene/planning_scene.h
index 105fef02ae..9e367ef258 100644
--- a/planning_scene/include/moveit/planning_scene/planning_scene.h
+++ b/planning_scene/include/moveit/planning_scene/planning_scene.h
@@ -57,6 +57,8 @@
 #include <memory>
 #include "rclcpp/rclcpp.hpp"
 
+#include "moveit_planning_scene_export.h"
+
 /** \brief This namespace includes the central class for representing planning contexts */
 namespace planning_scene
 {
@@ -85,7 +87,8 @@ using ObjectTypeMap = std::map<std::string, object_recognition_msgs::msg::Object
 /** \brief This class maintains the representation of the
     environment as seen by a planning instance. The environment
     geometry, the robot geometry and state are maintained. */
-class PlanningScene : private boost::noncopyable, public std::enable_shared_from_this<PlanningScene>
+class MOVEIT_PLANNING_SCENE_EXPORT PlanningScene : private boost::noncopyable,
+                                                   public std::enable_shared_from_this<PlanningScene>
 {
 public:
   /** \brief construct using an existing RobotModel */
